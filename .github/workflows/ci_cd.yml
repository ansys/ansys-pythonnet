name: CI

on:
  push:
    branches:
      - master
  pull_request:


env:
  LIBRARY_NAME: 'ansys-pythonnet'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:

  doc-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Doxygen Action
      uses: mattnotmitt/doxygen-action@1.9.4
      with:
        working-directory: "doc/"

    - name: Build Sphinx documentation
      run: |
        pip install -r doc/requirements.txt
        sphinx-build doc/source/ ./doc/build/html/

    - name: Upload artifact
      # Automatically uploads an artifact from the './_site' directory by default
      uses: actions/upload-pages-artifact@v1
      with:
        path: doc/build/html/

  build-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        os: [windows, ubuntu, macos]
        python: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        platform: [x64, x86]
        exclude:
          - os: ubuntu
            platform: x86
          - os: macos
            platform: x86

    steps:
      - name: Set Environment on macOS
        uses: maxim-lobanov/setup-xamarin@v1
        if: ${{ matrix.os == 'macos' }}
        with:
          mono-version: latest

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
          architecture: ${{ matrix.platform }}

      - name: Install dependencies
        run: |
          pip install --upgrade -r requirements.txt
          pip install numpy # for tests

      - name: Build and Install
        run: |
          pip install -v .

      - name: Set Python DLL path and PYTHONHOME (non Windows)
        if: ${{ matrix.os != 'windows' }}
        run: |
          echo PYTHONNET_PYDLL=$(python -m find_libpython) >> $GITHUB_ENV
          echo PYTHONHOME=$(python -c 'import sys; print(sys.prefix)') >> $GITHUB_ENV

      - name: Set Python DLL path and PYTHONHOME (Windows)
        if: ${{ matrix.os == 'windows' }}
        run: |
          Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append -InputObject "PYTHONNET_PYDLL=$(python -m find_libpython)"
          Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append -InputObject "PYTHONHOME=$(python -c 'import sys; print(sys.prefix)')"

      - name: Embedding tests
        run: dotnet test --runtime any-${{ matrix.platform }} --logger "console;verbosity=detailed" src/embed_tests/
        env:
          MONO_THREADS_SUSPEND: preemptive # https://github.com/mono/mono/issues/21466

      - name: Python Tests (Mono)
        if: ${{ matrix.os != 'windows' }}
        run: pytest --runtime mono

      # TODO: Run these tests on Windows x86
      - name: Python Tests (.NET Core)
        if: ${{ matrix.platform == 'x64' }}
        run: pytest --runtime coreclr

      - name: Python Tests (.NET Framework)
        if: ${{ matrix.os == 'windows' }}
        run: pytest --runtime netfx

      - name: Python tests run from .NET
        run: dotnet test --runtime any-${{ matrix.platform }} src/python_tests_runner/

      - name: Perf tests
        if: ${{ (matrix.python == '3.8') && (matrix.platform == 'x64') }}
        run: |
          pip install --force --no-deps --target src/perf_tests/baseline/ pythonnet==2.5.2
          dotnet test --configuration Release --runtime any-${{ matrix.platform }} --logger "console;verbosity=detailed" src/perf_tests/

      - name: "Build library source and wheel artifacts"
        run: |
          python -m pip install build twine wheel
          python -m build && python -m twine check dist/*

      - name: "Upload distribution artifact"
        uses: actions/upload-artifact@v3.1.0
        with:
          name: ${{ env.LIBRARY_NAME }}-py${{ matrix.python}}-${{ matrix.os }}-artifacts
          path: dist/
          retention-days: 7

  release:
    name: "Release"
    runs-on: ubuntu-latest
    needs: [doc-build, build-test]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    steps:
      - name: "Release to the private PyPI repository"
        uses: pyansys/actions/release-pypi-private@v2
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

